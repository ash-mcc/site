{
"version":3,
"file":"module$node_modules$ag_grid_react$lib$shared$portalManager.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/ag-grid-react/lib/shared/portalManager.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$ag_grid_react$lib$shared$portalManager\"] = function(global,require,module,exports) {\n// ag-grid-react v26.2.0\n\"use strict\";\nvar __spreadArrays = (this && this.__spreadArrays) || function () {\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n            r[k] = a[j];\n    return r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar PortalManager = /** @class */ (function () {\n    function PortalManager(parent, wrappingElement, maxComponentCreationTimeMs) {\n        this.destroyed = false;\n        this.portals = [];\n        this.hasPendingPortalUpdate = false;\n        this.wrappingElement = wrappingElement ? wrappingElement : 'div';\n        this.parent = parent;\n        this.maxComponentCreationTimeMs = maxComponentCreationTimeMs ? maxComponentCreationTimeMs : PortalManager.MAX_COMPONENT_CREATION_TIME_IN_MS;\n    }\n    PortalManager.prototype.getPortals = function () {\n        return this.portals;\n    };\n    PortalManager.prototype.destroy = function () {\n        this.destroyed = true;\n    };\n    PortalManager.prototype.destroyPortal = function (portal) {\n        this.portals = this.portals.filter(function (curPortal) { return curPortal !== portal; });\n        this.batchUpdate();\n    };\n    PortalManager.prototype.getComponentWrappingElement = function () {\n        return this.wrappingElement;\n    };\n    PortalManager.prototype.mountReactPortal = function (portal, reactComponent, resolve) {\n        this.portals = __spreadArrays(this.portals, [portal]);\n        this.waitForInstance(reactComponent, resolve);\n        this.batchUpdate();\n    };\n    PortalManager.prototype.updateReactPortal = function (oldPortal, newPortal) {\n        this.portals[this.portals.indexOf(oldPortal)] = newPortal;\n        this.batchUpdate();\n    };\n    PortalManager.prototype.batchUpdate = function () {\n        var _this = this;\n        if (this.hasPendingPortalUpdate) {\n            return;\n        }\n        setTimeout(function () {\n            if (!_this.destroyed) { // destroyed?\n                _this.parent.forceUpdate(function () {\n                    _this.hasPendingPortalUpdate = false;\n                });\n            }\n        });\n        this.hasPendingPortalUpdate = true;\n    };\n    PortalManager.prototype.waitForInstance = function (reactComponent, resolve, startTime) {\n        var _this = this;\n        if (startTime === void 0) { startTime = Date.now(); }\n        // if the grid has been destroyed in the meantime just resolve\n        if (this.destroyed) {\n            resolve(null);\n            return;\n        }\n        if (reactComponent.rendered()) {\n            resolve(reactComponent);\n        }\n        else {\n            if (Date.now() - startTime >= this.maxComponentCreationTimeMs && !this.hasPendingPortalUpdate) {\n                // last check - we check if this is a null value being rendered - we do this last as using SSR to check the value\n                // can mess up contexts\n                if (reactComponent.isNullValue()) {\n                    resolve(reactComponent);\n                    return;\n                }\n                console.error(\"AG Grid: React Component '\" + reactComponent.getReactComponentName() + \"' not created within \" + this.maxComponentCreationTimeMs + \"ms\");\n                return;\n            }\n            window.setTimeout(function () {\n                _this.waitForInstance(reactComponent, resolve, startTime);\n            });\n        }\n    };\n    PortalManager.MAX_COMPONENT_CREATION_TIME_IN_MS = 1000; // a second should be more than enough to instantiate a component\n    return PortalManager;\n}());\nexports.PortalManager = PortalManager;\n\n};"],
"names":["shadow$provide","global","require","module","exports","__spreadArrays","s","i","il","arguments","length","r","Array","k","a","j","jl","Object","defineProperty","value","PortalManager","parent","wrappingElement","maxComponentCreationTimeMs","destroyed","portals","hasPendingPortalUpdate","MAX_COMPONENT_CREATION_TIME_IN_MS","prototype","getPortals","PortalManager.prototype.getPortals","destroy","PortalManager.prototype.destroy","destroyPortal","PortalManager.prototype.destroyPortal","portal","filter","curPortal","batchUpdate","getComponentWrappingElement","PortalManager.prototype.getComponentWrappingElement","mountReactPortal","PortalManager.prototype.mountReactPortal","reactComponent","resolve","waitForInstance","updateReactPortal","PortalManager.prototype.updateReactPortal","oldPortal","newPortal","indexOf","PortalManager.prototype.batchUpdate","_this","setTimeout","forceUpdate","PortalManager.prototype.waitForInstance","startTime","Date","now","rendered","isNullValue","console","error","getReactComponentName","window"]
}
