{"version":3,"sources":["dcs/pasi/model.cljc"],"mappings":"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","names":["dcs.pasi.model/warn","s","js/console.log","dcs.pasi.model/decimal","js/parseFloat","dcs.pasi.model/queries","cljs.core/identity","coll","p1__41704#","cljs.core.map","cljs.core.assoc","cljs.core.get_in","p1__41709#","p1__41710#","p1__41711#","p1__41712#","p1__41713#","p1__41715#","p1__41716#","p1__41717#","m","typename","cljs.core/contains?","cljs.core.ex_info","e41834","m2","pred__41846","expr__41847","js/Error","cljs.core/=","m3","pred__42132","expr__42133","refdata-mappings","pred__42137","expr__42138","iter__4652__auto__","s__42146","cljs.core/LazySeq","temp__5753__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4650__auto__","size__4651__auto__","cljs.core/count","b__42148","cljs.core/chunk-buffer","i__42147","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__42145","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","refdata-mapping","m4","e","cljs.core/flatten","cljs.core/chunk-first"],"sourcesContent":["(ns dcs.pasi.model\n  (:require #?(:clj \n               [clojure.tools.logging :as log])))\n\n#?(:clj\n   (defn warn [s] (log/warn s))\n   :cljs\n   (defn warn [s] (js/console.log \"WARNING:\" s)))\n\n\n#?(:clj\n   (defn decimal [s] (bigdec s))\n   :cljs\n   (defn decimal [s] (js/parseFloat s)))\n\n\n(def queries\n  {:zwsCarbonMetric         {:graphql        \"query {\n                  zwsCarbonMetric {\n                    id\n                    wasteStream\n                    carbonWeighting\n                  }\n                }\"\n                             :results-parser identity\n                             :field-order    [:id :wasteStream :carbonWeighting]}\n   :aceFurnitureDescription {:graphql        \"query {\n                   aceFurnitureDescription {\n                     id\n                     category\n                     subcategory\n                     itemKg\n                   }\n                 }\"\n                             :results-parser identity\n                             :field-order    [:id :category :subcategory :itemKg]}\n   :aceReusedFurniture      {:graphql        \"query {\n                   aceReusedFurniture {\n                     id\n                     from\n                     to\n                     description {\n                       category\n                       subcategory\n                     }\n                     itemCount\n                   }\n                 }\"\n                             :results-parser (fn [coll]\n                                               (map #(assoc %\n                                                            :category (get-in % [:description :category])\n                                                            :subcategory (get-in % [:description :subcategory]))\n                                                    coll))\n                             :field-order    [:id :from :to :category :subcategory :itemCount]}\n   :stcmfSource             {:graphql        \"query {\n                   stcmfSource {\n                     id\n                     name\n                   }\n                 }\"\n                             :results-parser identity\n                             :field-order    [:id :name]}\n   :stcmfDestination        {:graphql        \"query {\n                   stcmfDestination {\n                     id\n                     name\n                   }\n                 }\"\n                             :results-parser identity\n                             :field-order    [:id :name]}\n   :stcmfIncomingFood       {:graphql        \"query {\n                   stcmfIncomingFood {\n                     id\n                     from\n                     to\n                     source {\n                       name\n                     }\n                     batchKg\n                   }\n                 }\"\n                             :results-parser (fn [coll]\n                                               (map #(assoc %\n                                                            :source (get-in % [:source :name]))\n                                                    coll))\n                             :field-order    [:id :from :to :source :batchKg]}\n   :stcmfRedistributedFood  {:graphql        \"query {\n                   stcmfRedistributedFood {\n                     id\n                     from\n                     to\n                     destination {\n                       name\n                     }\n                     batchKg\n                   }\n                 }\"\n                             :results-parser (fn [coll]\n                                               (map #(assoc %\n                                                            :destination (get-in % [:destination :name]))\n                                                    coll))\n                             :field-order    [:id :from :to :destination :batchKg]}\n   :frshrMaterialCategory   {:graphql        \"query {\n                   frshrMaterialCategory {\n                     id\n                     name\n                   }\n                 }\"\n                             :results-parser identity\n                             :field-order    [:id :name]}\n   :frshrReusedMaterial     {:graphql        \"query {\n                   frshrReusedMaterial {\n                     id\n                     from\n                     to\n                     hhMm\n                     route\n                     material {\n                       name\n                     }\n                     batchKg\n                   }\n                 }\"\n                             :results-parser (fn [coll]\n                                               (map #(assoc %\n                                                            :material (get-in % [:material :name]))\n                                                    coll))\n                             :field-order    [:id :from :to :hhMm :route :material :batchKg]}\n   :stcilBin                {:graphql        \"query {\n                   stcilBin {\n                     id\n                     name\n                   }\n                 }\"\n                             :results-parser identity\n                             :field-order    [:id :name]}\n   :stcilKerbsideRecycling  {:graphql        \"query {\n                   stcilKerbsideRecycling {\n                     id\n                     from\n                     to\n                     bin {\n                       name\n                     }\n                     batchTonnes\n                   }\n                 }\"\n                             :results-parser (fn [coll]\n                                               (map #(assoc %\n                                                            :bin (get-in % [:bin :name]))\n                                                    coll))\n                             :field-order    [:id :from :to :bin :batchTonnes]}\n   :dcsAceToRefData         {:graphql        \"query {\n                   dcsAceToRefData {\n                     id\n                     description {\n                       category\n                       subcategory\n                     }\n                     refMaterial {\n                       wasteStream\n                     }\n                     fraction\n                   }\n                 }\"\n                             :results-parser (fn [coll]\n                                               (map #(assoc %\n                                                            :category (get-in % [:description :category])\n                                                            :subcategory (get-in % [:description :subcategory])\n                                                            :wasteStream (get-in % [:refMaterial :wasteStream]))\n                                                    coll))\n                             :field-order    [:id :category :subcategory :wasteStream :fraction]}\n   :dcsStcmfToRefData       {:graphql        \"query {\n                   dcsStcmfToRefData {\n                     id\n                     destination {\n                       name\n                     }\n                     refProcess {\n                       name\n                     }\n                     refMaterial {\n                       wasteStream\n                     }\n                     fraction\n                   }\n                 }\"\n                             :results-parser (fn [coll]\n                                               (map #(assoc %                       \n                                                            :destination (get-in % [:destination :name])        \n                                                            :refProcess (get-in % [:refProcess :name])         \n                                                            :wasteStream (get-in % [:refMaterial :wasteStream]))\n                                                    coll))\n                             :field-order    [:id :destination :refProcess :wasteStream :fraction]}\n   :dcsFrshrToRefData       {:graphql        \"query {\n                   dcsFrshrToRefData {\n                     id\n                     material {\n                       name\n                     }\n                     refProcess {\n                       name\n                     }\n                     refMaterial {\n                       wasteStream\n                     }\n                     fraction\n                   }\n                 }\"\n                             :results-parser (fn [coll]\n                                               (map #(assoc %\n                                                            :material (get-in % [:material :name])\n                                                            :refProcess (get-in % [:refProcess :name])\n                                                            :wasteStream (get-in % [:refMaterial :wasteStream]))\n                                                    coll))\n                             :field-order    [:id :material :refProcess :wasteStream :fraction]}\n   :dcsStcilToRefData       {:graphql        \"query {\n                   dcsStcilToRefData {\n                     id\n                     bin {\n                       name\n                     }\n                     refProcess {\n                       name\n                     }\n                     refMaterial {\n                       wasteStream\n                     }\n                     fraction\n                   }\n                 }\"\n                             :results-parser (fn [coll]\n                                               (map #(assoc %\n                                                            :bin (get-in % [:bin :name])\n                                                            :refProcess (get-in % [:refProcess :name])\n                                                            :wasteStream (get-in % [:refMaterial :wasteStream]))\n                                                    coll))\n                             :field-order    [:id :bin :refProcess :wasteStream :fraction]}\n   :dcsOrg                  {:graphql        \"query {\n                   dcsOrg {\n                     id\n                     abbr\n                     name\n                     latitude\n                     longitude\n                     qid\n                   }\n                 }\"\n                             :results-parser identity\n                             :field-order    [:id :abbr :name :latitude :longitude :qid]}\n   :dcsProcess              {:graphql        \"query {\n                   dcsProcess {\n                     id\n                     name\n                   }\n                 }\"\n                             :results-parser identity\n                             :field-order    [:id :name]}\n   :dcsWasteReduction       {:graphql        \"query {\n                   dcsWasteReduction {\n                     __typename\n                     ... on AceReusedFurniture {\n                       id\n                       from\n                       to\n                       itemCount\n                       description {\n                         category\n                         subcategory\n                         itemKg\n                         refDataConnectors {\n                           fraction\n                           refMaterial {\n                             wasteStream\n                             carbonWeighting\n                           }\n                           refProcess {\n                             name\n                           }\n                           enabler {\n                             name\n                             latitude\n                             longitude\n                           }\n                         }\n                       }\n                     }\n                     ... on StcmfRedistributedFood {\n                       id\n                       from\n                       to\n                       batchKg\n                       destination {\n                         name\n                         refDataConnectors {\n                           fraction\n                           refMaterial {\n                             wasteStream\n                             carbonWeighting\n                           }\n                           refProcess {\n                             name\n                           }\n                           enabler {\n                             name\n                             latitude\n                             longitude\n                           }                        \n                         }\n                       }\n                     }\n                     ... on FrshrReusedMaterial {\n                       id\n                       from\n                       to\n                       batchKg\n                       material {\n                         name\n                         refDataConnectors {\n                           fraction\n                           refMaterial {\n                             wasteStream\n                             carbonWeighting\n                           }\n                           refProcess {\n                             name\n                           }\n                           enabler {\n                             name\n                             latitude\n                             longitude\n                           }                        \n                         }\n                       }\n                     }\n                     ... on StcilKerbsideRecycling {\n                       id\n                       from\n                       to\n                       batchTonnes\n                       bin {\n                         name\n                         refDataConnectors {\n                           fraction\n                           refMaterial {\n                             wasteStream\n                             carbonWeighting\n                           }\n                           refProcess {\n                             name\n                           }\n                           enabler {\n                             name\n                             latitude\n                             longitude\n                           }                        \n                         }\n                       }\n                     }\n                   }  \n                 }\"\n                             :results-parser (fn [coll]\n                                               (->> coll\n                                                    (map (fn [m]\n                                                           (let [typename (:__typename m)]\n                                                             (when (not (contains? #{\"AceReusedFurniture\" \"StcmfRedistributedFood\" \"FrshrReusedMaterial\" \"StcilKerbsideRecycling\"} typename))\n                                                               (throw (ex-info (str \"Unexpected typename: \" typename) {})))\n                                                             (try\n                                                               (let [m2               (condp = typename\n                                                                                        \"AceReusedFurniture\" (assoc m\n                                                                                                                    :furnitureCategory (get-in m [:description :category])\n                                                                                                                    :furnitureSubcategory (get-in m [:description :subcategory])\n                                                                                                                    :furnitureItemKg (decimal (get-in m [:description :itemKg]))\n                                                                                                                    :furnitureItemCount (decimal (:itemCount m)))\n                                                                                        \"StcmfRedistributedFood\" (assoc m\n                                                                                                                        :foodDestination (get-in m [:destination :name]))\n                                                                                        \"FrshrReusedMaterial\" (assoc m\n                                                                                                                     :materialCategory (get-in m [:material :name]))\n                                                                                        \"StcilKerbsideRecycling\" (assoc m\n                                                                                                                        :binType (get-in m [:bin :name])))\n                                                                     m3               (assoc m2\n                                                                                             :batchKg (condp = typename\n                                                                                                        \"AceReusedFurniture\" (* (:furnitureItemKg m2)\n                                                                                                                                (:furnitureItemCount m2))\n                                                                                                        \"StcmfRedistributedFood\" (decimal (:batchKg m2))\n                                                                                                        \"FrshrReusedMaterial\" (decimal (:batchKg m2))\n                                                                                                        \"StcilKerbsideRecycling\" (* (decimal (:batchTonnes m2))\n                                                                                                                                    1000)))\n                                                                     refdata-mappings (condp = typename\n                                                                                        \"AceReusedFurniture\" (get-in m3 [:description :refDataConnectors])\n                                                                                        \"StcmfRedistributedFood\" (get-in m3 [:destination :refDataConnectors])\n                                                                                        \"FrshrReusedMaterial\" (get-in m3 [:material :refDataConnectors])\n                                                                                        \"StcilKerbsideRecycling\" (get-in m3 [:bin :refDataConnectors]))]\n                                                                 (for [refdata-mapping refdata-mappings]\n                                                                   (let [m4 (assoc m3\n                                                                                   :enabler (get-in refdata-mapping [:enabler :name])\n                                                                                   :latitude (get-in refdata-mapping [:enabler :latitude])\n                                                                                   :longitude (get-in refdata-mapping [:enabler :longitude])\n                                                                                   :process (get-in refdata-mapping [:refProcess :name])\n                                                                                   :wasteStream (get-in refdata-mapping [:refMaterial :wasteStream])\n                                                                                   :batchKg (* (:batchKg m3)\n                                                                                               (decimal (:fraction refdata-mapping))))]\n                                                                     (assoc m4\n                                                                            :carbonSavingCo2eKg (* (:batchKg m4)\n                                                                                                   (decimal (get-in refdata-mapping [:refMaterial :carbonWeighting])))))))\n                                                               (catch #?(:clj Exception :cljs js/Error) e \n                                                                 (warn (str \"Problem: \" e \". Data: \" m)))))))\n                                                    flatten))\n                             :field-order    [:from :to :enabler :process :wasteStream :batchKg :carbonSavingCo2eKg :latitude :longitude :furnitureCategory :furnitureSubcategory :foodDestination :materialCategory :binType]}})"]}