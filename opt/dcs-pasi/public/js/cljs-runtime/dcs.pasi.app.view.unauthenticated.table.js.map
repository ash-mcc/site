{"version":3,"sources":["dcs/pasi/app/view/unauthenticated/table.cljs"],"mappings":";;AAmBA,+CAAA,/CAAMA,sGAAMC;AAAZ,AACE,WAAA,2CAAA,sEAAA,2CAAA,gEAAA,aAAA,hPAAME,iTACkB,cAGK,4CAAA,WAAAE,vDAACC,dAQDM;AARA,AAAM,8GAAA,2CAAA,lJAACL,0MAAc,eAAAF,fAACG,yCAKT,mkBAAA,AAAA,2CAAA,qDAAA,uBAAA,xrBAAM,0BAAA,iFAAA,iEAAA,qFAAA,gFAAA,iEAAA,oEAAA,wFAAAH,9iBAACI,8rBACP,+fAAA,AAAA,2CAAA,xiBAAM,0BAAA,iFAAA,iEAAA,qFAAA,gFAAA,iEAAA,wFAAAJ,1eAACI,inBAAsG,WAASC;AAAT,AAAiB,IAAMC,IAAE,AAASD;AAAjB,AAA0B,GAAI,OAASC;AAAG,iBAAA,VAAUA;;AAAKA;;WAAvL,MACA,0ZAAA,AAAA,2CAAA,6DAAA,aAAA,7gBAAM,0BAAA,iFAAA,qFAAA,gEAAA,iEAAA,oEAAAN,rYAACI;2OAXjD,wEAAA,KAAA,kEAAA,KAAA,6DAAA,qEAAA,WAAAP,5TAC6BE,7MAGA,AAAA,gGAAA,AAAA,sVAWFH;AAf3B,AAgB4B,wHAAA,jHAACY,4CAAI,mDAAAX,nDAACY;GAhBlC,mEAiB2B,WAAKC;AAAL,AACE,IAAMC,WAAS,AAAOD;IAChBE,UAAS,AAAaF;AAD5B,AAIE,AAAmBC;;AAEnB,OAACE,sBAAOC,2CAA8BH;;AAxBrE,AA0BE,YAAA,ZAACI,2BAA8B,4CAAK,AAAA,+FAAajB;;AA1BnD,0FAAA,kFAAA,2CAAA,uDAAA,2CAAA,yDAAA,OAAA,uDAAA,OAAA,uDAAA,yBAAA,mFAAA,kGAAA,2CAAA,9FA8BOkB,iKACWlB;;AAGpB,8CAAA,9CAAMmB,oGAAKC,MAAMC,eAAeC,cAAcC;AAA9C,AAAA,0FAAA,mDAAA,2CAAA,uDAAA,2CAAA,yDAAA,sBAAA,mFAEI1B,6CAAK,AAAC2B,gDAAcJ,MAAMC,eAAeC,cAAcC;;AAG3D,+CAAA,/CAAMG;AAAN,AAAA,sIAAA,AAAAD,yDAAA,AAAAA,kEAAA,AAAAA,iEAAA,AAAAA,xOACGN,4DACCQ,yDACAC,kEACAC,iEACAC","names":["dcs.pasi.app.view.unauthenticated.table/grid","ds","p1__60907#","spec","dcs.pasi.model/queries","p1__60906#","cljs.core.map","cljs.core.merge","cljs.core/name","cljs.core/contains?","params","v","cljs.core/vec","cljs.core.get","cljs.core.js__GT_clj","e","grid-api","col-api","cljs.core/reset!","dcs.pasi.app.state/unauthn-grid-api-cursor","js/console.log","js/module$node_modules$ag_grid_react$main.AgGridReact","dcs.pasi.app.view.unauthenticated.table/ele","wr-ds","selected-years","selected-orgs","selected-streams","dcs.pasi.app.view.unauthenticated.tmp/filter-ds","cljs.core/deref","dcs.pasi.app.view.unauthenticated.table/root","dcs.pasi.app.state/unauthn-wr-ds-cursor","dcs.pasi.app.state/unauthn-selected-years-cursor","dcs.pasi.app.state/unauthn-selected-orgs-cursor","dcs.pasi.app.state/unauthn-selected-streams-cursor"],"sourcesContent":["(ns dcs.pasi.app.view.unauthenticated.table\n  (:require    [cljs.spec.alpha :as s]\n               [clojure.string :as str]\n               [reagent.core :as r]\n               [\"ag-grid-react\" :as ag-grid]\n               [oz.core :as oz]\n               [cljs-time.core :as t]\n               [cljs-time.format :as tf]\n               [dcs.pasi.app.util :as util]\n               [dcs.pasi.app.state :as state]\n               [dcs.pasi.model :as model]\n               [dcs.pasi.app.query :as query]\n               [dcs.pasi.app.mutation :as mutation]\n               [dcs.pasi.app.view.unauthenticated.tmp :as tmp]))\n\n\n\n\n\n(defn grid [ds]\n  (let [spec {:defaultColDef {:resizable true}\n              :columnDefs (->> model/queries\n                               :dcsWasteReduction\n                               :field-order\n                               (map #(merge {:field (name %)}\n                                              ;; hack in some maxWidth settings\n                                            ;(when (contains? #{:from :to :process :refProcess :batchKg :itemCount :itemKg :fraction :abbr :qid :source} %) {:maxWidth 100})\n                                            ;(when (contains? #{:category :furnitureCategory :materialCategory :carbonWeighting} %) {:maxWidth 130})\n                                            ;(when (contains? #{:carbonSavingCo2eKg} %) {:maxWidth 160})\n                                            (when (contains? #{:fraction :batchKg :batchTonnes :carbonSavingCo2eKg :carbonWeighting :itemCount} %) {:type \"rightAligned\"})\n                                            (when (contains? #{:fraction :batchKg :batchTonnes :carbonSavingCo2eKg :carbonWeighting} %) {:valueFormatter (fn [^js params] (let [v (.-value params)] (if (number? v) (.toFixed v 2) v)))})\n                                            (when (contains? #{:to :enabler :batchKg :carbonSavingCo2eKg} %) {:sortable true})))\n                               vec)    \n              :immutableData true\n              :animateRows   true\n              :rowData       ds\n              :getRowNodeId  #(get (js->clj %) \"id\")\n              :onGridReady   (fn [e]\n                               (let [grid-api (.-api e)\n                                     col-api  (.-columnApi e)\n                                     ;col-ids  (vec (map #(.-colId %) (.getAllColumns col-api)))\n                                     ]\n                                 (.sizeColumnsToFit grid-api)\n                                 ;(.autoSizeColumns col-api (clj->js col-ids) true) ; no point without data in the grid\n                                 (reset! state/unauthn-grid-api-cursor grid-api)))\n              }]\n    (js/console.log \"columnDefs =\" (str (:columnDefs spec)))\n    [:div.ag-theme-balham {:style {:height \"100%\"\n                                   :width  \"100%\"\n                                   :color  \"purple\"}}\n     [:> ag-grid/AgGridReact\n      {:gridOptions spec}]]))\n\n\n(defn ele [wr-ds selected-years selected-orgs selected-streams]\n  [:div {:style {:height 500}}\n   [grid (tmp/filter-ds wr-ds selected-years selected-orgs selected-streams)]])\n\n\n(defn root []\n  [ele\n   @state/unauthn-wr-ds-cursor\n   @state/unauthn-selected-years-cursor\n   @state/unauthn-selected-orgs-cursor\n   @state/unauthn-selected-streams-cursor])"]}