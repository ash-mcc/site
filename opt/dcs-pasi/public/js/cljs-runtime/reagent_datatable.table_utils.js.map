{"version":3,"sources":["reagent_datatable/table_utils.cljs"],"mappings":"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","names":["reagent-datatable.table-utils/process-string-for-filtering","s","G__32133","clojure.string/trim","cljs.core/not-empty","clojure.string/lower-case","clojure.string/replace","reagent-datatable.table-utils/reset-pagination","table","cljs.core/assoc-in","reagent-datatable.table-utils/column-sort","table-atom","column-key","p1__32140#","cljs.core.swap_BANG_","cljs.core.update_in","p__32145","vec__32146","cljs.core.nth","curr-key","order-bool","cljs.core._EQ_","cljs.core/not","reagent-datatable.table-utils/column-sort-value","cljs.core.get_in","reagent-datatable.table-utils/column-filter-value","reagent-datatable.table-utils/column-filter-values","filter-input","medley.core.map_vals","medley.core/remove-vals","cljs.core/nil?","cljs.core.into","select-input","medley.core/filter-vals","cljs.core/seq","cljs.core.merge","reagent-datatable.table-utils/column-filter-on-change","evt","p1__32158#","var_args","G__32165","reagent-datatable.table-utils/column-filter-reset","js/Error","cljs.core/update-in","cljs.core/dissoc","value","p1__32163#","cljs.core/disj","reagent-datatable.table-utils/column-filters?","reagent-datatable.table-utils/column-select-input?","reagent-datatable.table-utils/column-select-filter-options","cljs.core.map","row","cljs.core.get","cljs.core/set","reagent-datatable.table-utils/column-select-filter-on-change","curr-value","cljs.core.fnil","cljs.core/conj","reagent-datatable.table-utils/column-select-filter-value","reagent-datatable.table-utils/column-filter-reset-all","cljs.core.update","reagent-datatable.table-utils/search-all-value","reagent-datatable.table-utils/search-all-on-change","p1__32180#","reagent-datatable.table-utils/search-all-reset","p1__32183#","p__32186","map__32187","cljs.core/--destructure-map","reagent-datatable.table-utils/block-filter-values","columns","cljs.core.concat","cljs.core.remove","cljs.core.comp","cljs.core/empty?","cljs.core/second","cljs.core.reduce","p__32192","vec__32193","col","k","filter-set","cljs.core.apply","iter__4652__auto__","s__32197","cljs.core/LazySeq","temp__5753__auto__","cljs.core/chunked-seq?","c__4650__auto__","size__4651__auto__","cljs.core/count","b__32199","cljs.core/chunk-buffer","i__32198","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__32196","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","filter","reagent-datatable.table-utils/column-visible?","cljs.core/contains?","reagent-datatable.table-utils/column-visibility-on-change","p1__32208#","cljs.core/deref","reagent-datatable.table-utils/table-columns","hidden","p1__32209#","reagent-datatable.table-utils/pagination-rows-per-page-on-change","p1__32210#","js/parseInt","reagent-datatable.table-utils/pagination-rows-per-page","or__4253__auto__","reagent-datatable.table-utils/pagination-current-page","reagent-datatable.table-utils/pagination-current-and-total-pages","processed-rows","offset","rows-per-page","nth-rows-at-page","nth-rows","reagent-datatable.table-utils/pagination-rows-exhausted?","current-page","tot-rows","left-rows","reagent-datatable.table-utils/pagination-inc-page","cljs.core/inc","reagent-datatable.table-utils/pagination-dec-page","cljs.core/dec","reagent-datatable.table-utils/date?","d","js/Date","reagent-datatable.table-utils/date-as-sortable","reagent-datatable.table-utils/compare-vals","x","y","cljs.core/vector?","p1__32212#","p2__32211#","r","cljs.core/compare","cljs.core.not_EQ_","cljs.core/reduced","cljs.core/vector","cljs.core/boolean?","reagent-datatable.table-utils/resolve-sorting","rows","temp__5751__auto__","vec__32213","order","cljs.core.sort","row1","row2","val1","val2","reagent-datatable.table-utils/resolve-column-filtering","column-filters","cljs.core.filter","row-data-map","cljs.core/every?","p__32217","vec__32218","v","render-fn","p1__32216#","medley.core.find_first","cljs.core/identity","row-v","G__32221","G__32222","clojure.string/includes?","reagent-datatable.table-utils/resolve-search-all","search-value","row-data","cljs.core/some","p__32224","vec__32225","cell-data","p1__32223#","cell","G__32228","reagent-datatable.table-utils/resolve-hidden-columns","hidden-columns","reagent-datatable.table-utils/resolve-pagination","cljs.core.partition_all","reagent-datatable.table-utils/process-rows","cljs.core/chunk-first"],"sourcesContent":["(ns reagent-datatable.table-utils\n  (:require\n   [medley.core :as medley]\n   [clojure.string :as str]))\n\n(defn process-string-for-filtering\n  \"Removes excess whitespace and converts to lowercase.\"\n  [s]\n  (some-> s\n          str/trim\n          not-empty\n          str/lower-case\n          (str/replace #\"\\s+\" \" \")))\n\n(defn reset-pagination\n  [table]\n  (assoc-in table [:pagination :current-page] 0))\n\n(defn column-sort\n  [table-atom column-key]\n  (swap! table-atom\n         #(-> %\n              reset-pagination\n              (update-in [:columns :sort]\n                         (fn [[curr-key order-bool]]\n                           (if (= curr-key column-key)\n                             [curr-key (not order-bool)]\n                             [column-key true]))))))\n\n(defn column-sort-value\n  [table]\n  (get-in table [:columns :sort]))\n\n(defn column-filter-value\n  [table column-key]\n  (get-in table [:columns :filter-input column-key]))\n\n(defn column-filter-values\n  [table]\n  (let [filter-input (->> (get-in table [:columns :filter-input])\n                          (medley/map-vals process-string-for-filtering)\n                          (medley/remove-vals nil?)\n                          (into {}))\n        select-input (medley/filter-vals seq (get-in table [:columns :filter-select]))]\n    (merge filter-input select-input)))\n\n(defn column-filter-on-change\n  [evt table-atom column-key]\n  (swap! table-atom\n         #(-> %\n              reset-pagination\n              (assoc-in [:columns :filter-input column-key]\n                        (-> evt .-target .-value)))))\n\n(defn column-filter-reset\n  ([table-atom column-key]\n   (swap! table-atom update-in [:columns :filter-input] dissoc column-key))\n  ([table-atom column-key value]\n   (swap! table-atom #(-> %\n                          (update-in [:columns :filter-input] dissoc column-key)\n                          (update-in [:columns :filter-select column-key] disj value)))))\n\n(defn column-filters?\n  [table column-key]\n  (get-in table [:columns :column-filters?] column-key))\n\n(defn column-select-input?\n  [table column-key]\n  (= :select (get-in table [:columns :column-filters column-key])))\n\n(defn column-select-filter-options\n  [table column-key]\n  (->> (get-in table [:rows :data])\n       (map (fn [row]\n              (get row column-key)))\n       (set)))\n\n(defn column-select-filter-on-change\n  [table-atom value column-key]\n  (swap! table-atom\n         (fn [table]\n           (let [curr-value (get-in table [:columns :filter-select column-key value])]\n             (if (seq curr-value)\n               (-> table\n                   reset-pagination\n                   (update-in [:columns :filter-select column-key] disj curr-value))\n               (-> table\n                   reset-pagination\n                   (update-in [:columns :filter-select column-key] (fnil conj #{}) value)))))))\n\n(defn column-select-filter-value\n  [table column-key value]\n  (get-in table [:columns :filter-select column-key value] false))\n\n(defn column-filter-reset-all\n  [table-atom]\n  (swap! table-atom\n         (fn [table]\n           (-> table\n               reset-pagination\n               (update :columns dissoc :filter-select)\n               (update :columns dissoc :filter-input)))))\n\n(defn search-all-value\n  [table]\n  (get-in table [:head :search-all]))\n\n(defn search-all-on-change\n  [evt table-atom]\n  (swap! table-atom\n         #(-> %\n              reset-pagination\n              (assoc-in [:head :search-all]\n                        (-> evt .-target .-value)))))\n\n(defn search-all-reset\n  [table-atom]\n  (swap! table-atom\n         #(-> %\n              reset-pagination\n              (update :head dissoc :search-all))))\n\n\n(defn block-filter-values\n  [{:keys [columns]}]\n  (concat\n   (remove (comp empty? second) (:filter-input columns))\n   (->> columns\n        :filter-select\n        (medley/filter-vals seq)\n        ;; build a vector of filters with each filter taking the form of\n        ;; [:field-key \"filter-term\"]\n        (reduce (fn [col [k filter-set]]\n                  (apply conj col\n                         (for [filter filter-set]\n                           [k filter])))\n                nil)\n        (remove empty?))))\n\n(defn column-visible?\n  [table column-key]\n  (contains? (get-in table [:columns :hidden]) column-key))\n\n(defn column-visibility-on-change\n  [table-atom column-key]\n  (swap! table-atom #(-> %\n                         reset-pagination\n                         (update-in [:columns :filter-select] dissoc column-key)\n                         (update-in [:columns :filter-input] dissoc column-key)\n                         (update-in [:columns :hidden]\n                                    (if (column-visible? @table-atom column-key) disj conj)\n                                    column-key))))\n\n(defn table-columns\n  [table]\n  (let [columns (get-in table [:columns :data])\n        hidden (get-in table [:columns :hidden])]\n    (remove #(contains? hidden (:column-key %)) columns)))\n\n(defn pagination-rows-per-page-on-change\n  [evt table-atom]\n  (swap! table-atom\n         #(-> %\n              (assoc-in [:pagination :rows-per-page]\n                        (js/parseInt (-> evt .-target .-value)))\n              (assoc-in [:pagination :current-page] 0))))\n\n(defn pagination-rows-per-page\n  [table]\n  (or (get-in table [:pagination :rows-per-page]) 15))\n\n(defn pagination-current-page\n  [table]\n  (or (get-in table [:pagination :current-page]) 0))\n\n(defn pagination-current-and-total-pages\n  [table processed-rows]\n  (let [offset (pagination-current-page table)\n        rows-per-page (pagination-rows-per-page table)\n        nth-rows-at-page (+ rows-per-page (* offset rows-per-page))\n        nth-rows (count processed-rows)]\n    (str (inc (* offset rows-per-page))\n         \"-\"\n         (if (> nth-rows-at-page nth-rows)\n           nth-rows\n           nth-rows-at-page)\n         \" of \"\n         nth-rows)))\n\n(defn pagination-rows-exhausted?\n  [table processed-rows]\n  (let [current-page (pagination-current-page table)\n        rows-per-page (pagination-rows-per-page table)\n        tot-rows (count processed-rows)\n        left-rows (- tot-rows (* rows-per-page\n                                 current-page)\n                     rows-per-page)]\n    (or (zero? left-rows) (neg? left-rows))))\n\n(defn pagination-inc-page\n  [table-atom processed-rows]\n  (when-not (pagination-rows-exhausted? @table-atom processed-rows)\n    (swap! table-atom update-in [:pagination :current-page]\n           (fnil inc 0))))\n\n(defn pagination-dec-page\n  [table-atom]\n  (when (> (pagination-current-page @table-atom) 0)\n    (swap! table-atom update-in [:pagination :current-page]\n           dec)))\n\n\n(defn date?\n  \"Returns true if the argument is a date, false otherwise.\"\n  [d]\n  (instance? js/Date d))\n\n(defn date-as-sortable\n  \"Returns something that can be used to order dates.\"\n  [d]\n  (.getTime d))\n\n(defn compare-vals\n  \"A comparator that works for the various types found in table structures.\n  This is a limited implementation that expects the arguments to be of\n  the same type. The :else case is to call compare, which will throw\n  if the arguments are not comparable to each other or give undefined\n  results otherwise.\n  Both arguments can be a vector, in which case they must be of equal\n  length and each element is compared in turn.\"\n  [x y]\n  (cond\n    (and (vector? x)\n         (vector? y)\n         (= (count x) (count y)))\n    (reduce #(let [r (compare (first %2) (second %2))]\n               (if (not= r 0)\n                 (reduced r)\n                 r))\n            0\n            (map vector x y))\n\n    (or (and (number? x) (number? y))\n        (and (string? x) (string? y))\n        (and (boolean? x) (boolean? y)))\n    (compare x y)\n\n    (and (date? x) (date? y))\n    (compare (date-as-sortable x) (date-as-sortable y))\n\n    :else ;; hope for the best... are there any other possiblities?\n    (compare (str x) (str y))))\n\n(defn resolve-sorting\n  [table rows]\n  (if-let [[column-key order] (column-sort-value table)]\n    (sort\n     (fn [row1 row2]\n       (let [val1 (column-key row1)\n             val2 (column-key row2)]\n         (if order\n           (compare-vals val2 val1)\n           (compare-vals val1 val2))))\n     rows)\n    ;; with no sorting return rows input\n    rows))\n\n(defn resolve-column-filtering\n  [table rows]\n  (if-let [column-filters (column-filter-values table)]\n    (filter\n     (fn [row-data-map]\n       (every?\n        (fn [[k v]]\n          (let [render-fn (or (:render-fn\n                               (medley/find-first\n                                #(= (:column-key %) k)\n                                (get-in table [:columns :data])))\n                              identity)\n                row-v (render-fn (get row-data-map k))]\n            (if (string? v)\n              (some-> row-v\n                      str/lower-case\n                      (str/includes? v))\n              ;; to filter when we have a select tag.\n              ;; the v values are in a set\n              (get v row-v))))\n        column-filters)) rows)\n    rows))\n\n(defn resolve-search-all\n  [table rows]\n  (if-let [search-value (process-string-for-filtering (search-all-value table))]\n    (filter\n     (fn [row-data]\n       (some\n        (fn [[k cell-data]]\n          (let [render-fn (or (:render-fn\n                               (medley/find-first\n                                #(= (:column-key %) k)\n                                (get-in table [:columns :data])))\n                              identity)\n                cell (render-fn cell-data)]\n            (some-> cell\n                    str\n                    str/lower-case\n                    (str/includes? search-value))))\n        row-data)) rows)\n    rows))\n\n(defn resolve-hidden-columns\n  [table rows]\n  (if-let [hidden-columns (seq (get-in table [:columns :hidden]))]\n    (map\n     (fn [row-data]\n       (apply dissoc row-data hidden-columns))\n     rows)\n    rows))\n\n(defn resolve-pagination\n  [table rows]\n  (let [current-page (pagination-current-page table)\n        rows-per-page (pagination-rows-per-page table)]\n    [rows (when (seq rows)\n            (nth (partition-all rows-per-page rows)\n                 current-page))]))\n\n(defn process-rows\n  [table-atom]\n  ;; all data transformation is performed here, on READ!\n  ;; swap! is not allowed in this function\n  (let [table @table-atom\n        rows (get-in table [:rows :data])]\n    (->> rows\n         (resolve-hidden-columns table)\n         (resolve-sorting table)\n         (resolve-column-filtering table)\n         (resolve-search-all table)\n         (resolve-pagination table))))\n\n"]}