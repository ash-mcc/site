{"version":3,"sources":["dcs/pasi/app/datagrid.cljs"],"mappings":";;AAUA,8BAAA,wCAAA,wDAAA,iEAAA,+EAAA,2EAAA,kFAAA,gFAAA,yFAAA,2FAAA,8EAAA,gFAAA,iFAAA,uFAAA,oEAAA,4EAAA,+EAAA,2CAAA,0EAAA,iFAAA,0DAAA,8EAAA,2CAAA,0EAAA,0CAAA,2CAAA,0EAAA,0CAAA,2CAAA,0EAAA,iFAAA,uGAAA,2CAAA,0EAAA,iFAAA,wFAAA,2CAAA,0EAAA,iFAAA,wFAAA,2CAAA,0EAAA,iFAAA,wFAAA,2CAAA,0EAAA,iFAAA,oFAAA,2CAAA,0EAAA,iFAAA,wFAAA,2CAAA,0EAAA,iFAAA,wFAAA,2CAAA,0EAAA,iFAAA,2FAAA,2CAAA,0EAAA,0CAAA,2CAAA,0EAAA,0CAAA,2CAAA,0EAAA,iFAAA,wFAAA,2CAAA,0EAAA,/yJAAKA;AAmBL,AAAKC,kDAA0B,gDAAA,hDAACC;AAChC,AAAKC,uCAAe,AAACD,gDAAO,AAACE,gBAAM,AAACC,eAAKL;AAGzC,4BAAA,5BAAKM;AAGL,iCAAA,jCAAMC,0EAAUC;AAAhB,AACE,cAAA,AAAAC,VAAMC,0BAASP;AAAf,AACE,gCAAA,AAAAM,zBAACE,yCAAaV,iDAA0BO,OAAOE,QAAQ,AAAA,wGAAkB,CAACA,wCAAAA,qEAAAA,/BAAQV,iDAAAA,+BAAQM;;AAG9F,qCAAA,2CAAA,oEAAA,WAAA,iEAAA,2CAAA,iGAAA,mEAAA,WAAAM,1bAAKC,qUAEsBN;AAF3B,AAGiB,OAACO,sBAAOb,gDAA0B,AAAAW;;AAGnD;;;yCAAA,zCAAMG,0FAEHC,YAAYC;AAFf,AAGE,AAAiBA;;AACjB,AAACC,yCAA4BF;;AAC7B,IAAMG,IAAE,AAAA,AAAIF;AAAZ,AACE,YAAA,ZAACG,iBAAoBD;;AACrB,AAACL,sBAAOX,qCAAe,AAACkB,gDAAQF;;AAIhC,OAAA,AAAAV,+EAAA,/DAAiBR,4EAAuCM;;AAG5D,iCAAA,jCAAMe;AAAN,AAAA,0FAAA,mDAIG,+BAAA,dAAMN;aAAN,AAAAP,TACMc,yBAAQpB;IACRqB,SAAO,AAACC,qDAAa,WAAKC,GAAGC;AAAR,AAAA,0FACGD,GAAG,AAACE,eAAKD;GACZ,AAACtB,eAAKL;IAC3B6B,gCAAkB,AAACC,gDAAQf,uCAAiBC;AALlD,AAAA,0FAMGe,+BAAkBf,YAAYO,OAAOC,OAAOK;KAVlD,mFAAA,kFAAA,2CAAA,uDAAA,2CAAA,yDAAA,MAAA,uDAAA,OAAA,uDAAA,yBAAA,mFAAA,kGAAA,2CAAA,9FAeQG,iKACWnB","names":["dcs.pasi.app.datagrid/types","dcs.pasi.app.datagrid/grid-api-component-holder","reagent.core.atom","dcs.pasi.app.datagrid/type-kw-holder","cljs.core/first","cljs.core/keys","dcs.pasi.app.datagrid/url","dcs.pasi.app.datagrid/get-rows","params","cljs.core/deref","type-kw","dcs.pasi.app.query/query","p1__26518#","dcs.pasi.app.datagrid/grid-options","cljs.core/reset!","dcs.pasi.app.datagrid/on-click-handler","dropdown-id","event","dcs.pasi.app.dropdown/toggle-is-activate","s","js/console.log","cljs.core.keyword","dcs.pasi.app.datagrid/root-div","prompt","values","cljs.core.keep_indexed","ix","k","cljs.core/name","on-click-handler'","cljs.core.partial","dcs.pasi.app.dropdown/dropdown","js/module$node_modules$ag_grid_react$main.AgGridReact"],"sourcesContent":["(ns dcs.pasi.app.datagrid\n  (:require\n   [reagent.core :as r]\n   [\"ag-grid-react\" :as ag-grid]\n   [dcs.pasi.app.query :as query]\n   [dcs.pasi.app.dropdown :as dropdown]))\n\n\n;; Can't (in general) rely on resolving a string to a function in running cljs code \n;; so our wiring has to be hard, and at an appropriate time\n(def types \n  {:zwsCarbonMetric         {:editable-fields #{:carbonWeighting}}\n   :aceFurnitureDescription {:editable-fields #{:itemKg}}\n   :aceReusedFurniture      {:editable-fields #{:itemCount}}\n   :stcmfSource             {:editable-fields #{}}\n   :stcmfDestination        {:editable-fields #{}}\n   :stcmfIncomingFood       {:editable-fields #{:batchKg}}\n   :stcmfRedistributedFood  {:editable-fields #{:batchKg}}\n   :frshrMaterialCategory   {:editable-fields #{}}\n   :frshrReusedMaterial     {:editable-fields #{:batchKg}}\n   :dcsAceToRefData         {:editable-fields #{:fraction}}\n   :dcsStcmfToRefData       {:editable-fields #{:fraction}}\n   :dcsFrshrToRefData       {:editable-fields #{:fraction}}\n   :dcsOrg                  {:editable-fields #{:name :qid}}\n   :dcsProcess              {:editable-fields #{}}\n   :dcsWasteReduction       {:editable-fields #{}}})\n\n\n;; state \n(def grid-api-component-holder (r/atom nil))\n(def type-kw-holder (r/atom (first (keys types))))\n\n\n(def url \"http://localhost:2021/pasi/graphql\")\n\n\n(defn get-rows [params]\n  (let [type-kw @type-kw-holder]\n    (query/query @grid-api-component-holder params type-kw (:editable-fields (type-kw types)) url)))\n\n\n(def grid-options\n  {:rowModelType \"infinite\" ;; define with otherwise :datasource with :getRows won't work\n   :datasource   {:getRows get-rows}\n   :onGridReady #(reset! grid-api-component-holder (.-api %))})\n\n\n(defn on-click-handler \n  \"controls the grid's datasource\"\n  [dropdown-id event]\n  (.preventDefault event)\n  (dropdown/toggle-is-activate dropdown-id)\n  (let [s (-> event .-target .-name)]\n    (js/console.log \"s:\" s)\n    (reset! type-kw-holder (keyword s))\n    ;; The get-rows defn hasn't changed \n    ;; - reassinging it only to prompt a re-fetch (which will use the new type-kw).\n    ;; Probably there is a nicer way to force the re-fetch.\n    (.setDatasource @grid-api-component-holder #js{:getRows get-rows})))\n\n\n(defn root-div\n  []\n  [:div\n   \n   (let [dropdown-id \"chooser\"\n         prompt @type-kw-holder\n         values (keep-indexed (fn [ix k] \n                                [ix (name k)]) \n                              (keys types))\n         on-click-handler' (partial on-click-handler dropdown-id)]\n     [dropdown/dropdown dropdown-id prompt values on-click-handler'])\n   \n   [:div.ag-theme-alpine {:style {:height 500\n                                  :width  1000\n                                  :color  \"purple\"}}\n    [:> ag-grid/AgGridReact\n     {:gridOptions grid-options}]]])\n\n\n\n\n  "]}