{"version":3,"sources":["dcs/pasi/app/query.cljs"],"mappings":"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","names":["dcs.pasi.app.query/http-call","url","graphql","response-handler","c__41462__auto__","cljs.core.async.chan","cljs.core.async.impl.dispatch/run","f__41463__auto__","switch__41424__auto__","state_42602","state_val_42603","inst_42588","inst_42589","inst_42590","inst_42591","cljs.core/PersistentHashMap","inst_42592","inst_42593","inst_42594","inst_42595","inst_42596","inst_42597","cljs.core.async.impl.ioc-helpers/take!","inst_42599","inst_42600","cljs.core.async.impl.ioc-helpers/return-chan","statearr-42778","state-machine__41425__auto__","ret-value__41426__auto__","result__41427__auto__","cljs.core/keyword-identical?","ex__41428__auto__","e42788","statearr-42792","cljs.core/seq","statearr-42799","cljs.core/first","state__41464__auto__","statearr-42874","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","cljs_http.client.post","dcs.pasi.app.query/response-handler","result-parser","params","response","status","cljs.core.not_EQ_","cljs.core.ex_info","coll","cljs.core/vals","cljs.core.keep_indexed","index","item","cljs.core.assoc","p1__42900#","G__42945","p1__42901#","cljs.core/clj->js","cljs.core/count","js/Error","dcs.pasi.app.query/query","grid-api-component","type-kw","editable-fields","cljs.spec.alpha.valid_QMARK_","cljs.core/keyword?","cljs.core/set?","cljs.core/string?","model","dcs.pasi.model/queries","results-parser","field-order","col-defs","p1__42962#","cljs.core.remove","cljs.core._EQ_","p1__42963#","cljs.core.map","cljs.core.merge","cljs.core/name","cljs.core/contains?","v","response-handler'","cljs.core.partial"],"sourcesContent":["(ns dcs.pasi.app.query\n  (:require\n   [cljs.core.async :as async]\n   [cljs.spec.alpha :as s]\n   [cljs-http.client :as http]\n   [dcs.pasi.model :as model]))\n\n\n\n(defn http-call [url ^String graphql response-handler]\n  (async/go \n    (let [response (async/<! (http/post \n                              url \n                              {:debug true\n                               :with-credentials? false\n                               :headers           {\"Content-type\" \"application/json\"}\n                               :json-params       {:query     graphql\n                                                   :variables nil}}))]\n      (response-handler response))))\n\n\n(defn response-handler [result-parser params response]\n  (let [status (:status response)]\n    (when (not= 200 status)\n      (throw (ex-info (str \"Error code: \" status) {})))\n    (let [coll (-> response\n                   :body\n                   ;; assume that it was an application/json response \n                   ;; which will have prompted cljs-http to have \n                   ;; converted the JSON data in the body, to Clojure data\n                   :data\n                   ;; assume a map with a single entry: get the value of that entry\n                   vals\n                   first)]\n      (->> coll\n           (keep-indexed (fn [index item] (assoc item :rowId (inc index))))\n           result-parser\n           (#(do \n               %))\n           (#(.successCallback\n              ^js params\n              (clj->js %)\n              (clj->js (count %))))))))\n\n\n(defn query \n  [grid-api-component params type-kw editable-fields url]\n  {:pre [(s/valid? keyword? type-kw)\n         (s/valid? set? editable-fields)\n         (s/valid? string? url)]}\n  (let [model (type-kw model/queries)]\n    (when (nil? model)\n      (throw (ex-info (str \"No such model for: \" type-kw) {})))\n    (let [graphql           (:graphql model)\n          results-parser    (:results-parser model)\n          field-order       (:field-order model)\n          col-defs          (->> field-order\n                                 (remove #(= :id %))\n                                 (map #(merge {:field (name %)}\n                                              (when (= :rowId %) {:filter \"agNumberColumnFilter\"})\n                                              (when (contains? editable-fields %) {:editable true})\n                                              ;; hack in some maxWidth settings\n                                              (when (contains? #{:from :to :process :refProcess :batchKg :itemCount :itemKg :fraction :abbr :qid :source} %) {:maxWidth 100})\n                                              (when (contains? #{:category :furnitureCategory :materialCategory :carbonWeighting} %) {:maxWidth 130})\n                                              (when (contains? #{:carbonSavingCo2eKg} %) {:maxWidth 160})\n                                              (when (contains? #{:fraction :batchKg :batchTonnes :carbonSavingCo2eKg :carbonWeighting :itemCount} %) {:type \"rightAligned\"})\n                                              (when (contains? #{:fraction :batchKg :batchTonnes :carbonSavingCo2eKg :carbonWeighting} %) {:valueFormatter (fn [^js params] (let [v (.-value params)] (if (number? v) (.toFixed v 2) v)))})\n                                              (when (contains? #{:enabler} %) {:sortable true}))))\n          response-handler' (partial response-handler results-parser params)]\n      (.setColumnDefs grid-api-component (clj->js col-defs)) ;; hack to set the columnDefs to 'match' the expected data\n      (http-call url graphql response-handler'))))\n\n\n"]}