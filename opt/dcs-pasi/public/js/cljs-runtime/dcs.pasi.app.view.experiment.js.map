{"version":3,"sources":["dcs/pasi/app/view/experiment.cljs"],"mappings":"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","names":["dcs.pasi.app.view.experiment/counts-per-month-spec","data","dcs.pasi.app.view.experiment/editable","e","row-map","cljs.core.js__GT_clj","clojure.string/starts-with?","dcs.pasi.app.view.experiment/date-format","cljs_time.format.formatter","dcs.pasi.app.view.experiment/valid-date?","s","cljs_time.format.parse","js/Error","dcs.pasi.app.view.experiment/update-id","current-value-of-atom","old-id","new-id","cljs.spec.alpha.valid_QMARK_","cljs.core/seq?","coll","cljs.core/vec","temp__5751__auto__","n","cljs.core/first","p1__52059#","p2__52058#","cljs.core.keep_indexed","cljs.core._EQ_","p1__52060#","js/console.log","p1__52061#","cljs.core.get","cljs.core/assoc-in","cljs.core/seq","dcs.pasi.app.view.experiment/add-new","_not-used","cljs.core.conj","cljs.core.map","p1__52062#","cljs.core.filter","p1__52063#","js/parseInt","cljs.core.subs","cljs.core.sort","cljs.core/last","cljs-time.format/unparse","cljs-time.core/today","cljs_time.core.plus","cljs_time.core.days","dcs.pasi.app.view.experiment/upsert","p1__52065#","p2__52064#","cljs.core.assoc","dcs.pasi.app.view.experiment/onCellValueChanged","old-value","new-value","col","cljs.core/not","cljs-time.core/before?","cljs.core.not_EQ_","cljs.core/contains?","cljs.core.swap_BANG_","dcs.pasi.app.state/x-ds-cursor","dcs.pasi.app.view.experiment/category->subcategories","dcs.pasi.app.view.experiment/subcategories","cljs.core/clj->js","dcs.pasi.app.view.experiment/grid","ds","p1__52066#","spec","js/getDatePicker","cljs.core/keys","grid-api","col-api","cljs.core/reset!","dcs.pasi.app.state/x-grid-api-component-cursor","js/module$node_modules$ag_grid_react$main.AgGridReact","dcs.pasi.app.view.experiment/load-from-server","_e","url","js/window.location.hostname","model","dcs.pasi.model/queries","graphql","results-parser","field-order","response-handler","response","status","cljs.core.ex_info","cljs.core/vals","p1__52067#","G__52068","cljs.core.sort_by","cljs.core/reverse","dcs.pasi.app.query/http-call","dcs.pasi.app.view.experiment/new-row","dcs.pasi.app.view.experiment/save-to-server","changed-rows","p1__52069#","cljs.core/deref","cljs.core.remove","cljs.core/count","seq__52071","chunk__52072","count__52073","i__52074","temp__5753__auto__","cljs.core/chunked-seq?","c__4679__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/next","m","id","p1__52070#","dcs.pasi.app.mutation/http-call","dcs.pasi.app.view.experiment/root","reagent.core/after-render","dcs.pasi.app.util.scroll_fn","raw","counts","oz.core/vega-lite","dcs.pasi.app.util/vega-embed-opts"],"sourcesContent":["(ns dcs.pasi.app.view.experiment\n  (:require    [cljs.spec.alpha :as s]\n               [clojure.string :as str]\n               [reagent.core :as r]\n               [\"ag-grid-react\" :as ag-grid]\n               [oz.core :as oz]\n               [cljs-time.core :as t]\n               [cljs-time.format :as tf]\n               [dcs.pasi.app.util :as util]\n               [dcs.pasi.app.state :as state]\n               [dcs.pasi.model :as model]\n               [dcs.pasi.app.query :as query]\n               [dcs.pasi.app.mutation :as mutation]))\n\n\n(defn counts-per-month-spec\n  [data]\n  {:schema    \"https://vega.github.io/schema/vega/v5.json\"\n   ;:width      500\n   ;:height     500\n   ;:background \"#f2dfce\"\n   :title     \"counts per quarter\"\n   :data      {:values data}\n   :transform [{:timeUnit \"yearquarter\"\n                :field    \"to\"\n                :as       \"quarter\"}\n               {:aggregate [{:op    \"sum\" ;; TODO calc this properly\n                             :field \"itemCount\"\n                             :as    \"itemCount\"}]\n                :groupby   [\"quarter\"]}]\n   :layer     [{:mark     {:type                 \"bar\"\n                           :cornerRadiusTopLeft  3\n                           :cornerRadiusTopRight 3}\n                :encoding {:x       {:title \"year quarter\"\n                                     :field \"quarter\"\n                                     :type  \"temporal\"\n                                     :axis  {:labelExpr  \"timeFormat(datum.value, '%q') == '1' ? timeFormat(datum.value, 'Q%q %Y') : timeFormat(datum.value, 'Q%q')\"\n                                             :labelAngle 90\n                                             :tickCount  {:interval \"month\"\n                                                          :step     3\n                                                          :start    0}}\n                                     :scale {:domain [\"2016-01-01T00:00:00\" {:expr \"now()\"}]}}\n                           :y       {:title \"item count\"\n                                     :field \"itemCount\"\n                                     :type  \"quantitative\"\n                                     :scale {:domain [0 200]}}\n                           :tooltip [{:title  \"year quarter\"\n                                      :field  \"quarter\"\n                                      :type   \"temporal\"\n                                      :format \"Q%q %Y\"}\n                                     {:title  \"item count\"\n                                      :field  \"itemCount\"\n                                      :type   \"quantitative\"\n                                      :format \".0f\"}]}}]\n   :config    {:axisX {:grid false}}})\n\n(defn editable [e]\n  ;(js/console.log e)\n  (let [row-map (js->clj (.-data e) :keywordize-keys true)]\n    (str/starts-with? (:id row-map) \"new-\")))\n\n(def date-format (tf/formatter \"yyyy-MM-dd\"))\n\n(defn valid-date? [s]\n  (tf/parse date-format s))\n\n(defn update-id \n  [current-value-of-atom old-id new-id]\n  {:pre [(s/valid? seq? current-value-of-atom)]}\n  (let [coll (vec current-value-of-atom)]\n    (if-let [n (first (keep-indexed #(when (= (:id %2) old-id) %1) coll))]\n      (-> coll\n          (#(do (js/console.log \"n:\" n) %))\n          (#(do (js/console.log \"nth\" (str (get coll n))) %))\n          (assoc-in [n :id] new-id)\n          (assoc-in [n :status] \"saved to server\")\n          seq)\n      coll)))\n\n(defn add-new [current-value-of-atom _not-used]\n  (conj current-value-of-atom\n        {:id (str \"new-\" (->> current-value-of-atom\n                              (map :id)\n                              (filter #(str/starts-with? % \"new-\"))\n                              (map #(js/parseInt (subs % 4)))\n                              sort \n                              last\n                              inc))\n         :from (tf/unparse date-format (t/today))\n         :to (tf/unparse date-format (t/plus (t/today) (t/days 1)))\n         :itemCount 0\n         :status \"new - not saved to server\"}))\n\n(defn upsert [current-value-of-atom row-map]\n  {:pre [(s/valid? seq? current-value-of-atom)]}\n  (let [coll (vec current-value-of-atom)\n        n (first (keep-indexed #(when (= (:id %2) (:id row-map)) %1) coll))]\n      (-> coll\n          (assoc n row-map)\n          seq)))\n\n(defn onCellValueChanged [e]\n  (js/console.log e)\n  (let [row-map   (js->clj (.-data e) :keywordize-keys true)\n        old-value (.-oldValue e)\n        new-value (.-newValue e)\n        col       (.-field (.-colDef e))\n        row-map   (if (and (= col \"from\")\n                           (not (t/before? (tf/parse date-format (:from row-map)) (tf/parse date-format (:to row-map)))))\n                    (assoc row-map :to nil)\n                    row-map)\n        row-map   (if (and (= col \"to\")\n                           (not (t/before? (tf/parse date-format (:from row-map)) (tf/parse date-format (:to row-map)))))\n                    (assoc row-map :from nil)\n                    row-map)\n        row-map   (if (and (= col \"category\")\n                           (not= new-value old-value))\n                    (assoc row-map :subcategory nil)\n                    row-map)\n        row-map (if (contains? #{\"loaded from server\" \"saved to server\"} (:status row-map)) ;; TODO improve by comparing with what was fetched?\n                  (assoc row-map :status \"changed - not saved to server\")\n                  row-map)]\n     ;; if all needed values are present then add it to the backing data \n     ;; ...actually no - suspend this validity check here - perhaps do it on upload\n    (when true #_(and (valid-date? (:to row-map))\n               (valid-date? (:from row-map))\n               (some? (:category row-map))\n               (some? (:subcategory row-map))\n               (int? (js/parseInt (:itemCount row-map))))\n      (swap! state/x-ds-cursor upsert row-map))\n    ))\n\n(def category->subcategories\n  {\"Furniture\"      [\"Chair, Kitchen, Dining or Wooden\"\n                     \"Chest-of-Drawers, Tallboy\"\n                     \"Small Desk, Computer Table\"]\n   \"Soft Furniture\" [\"Mattress, single\"\n                     \"Chaise Longue \"]})\n\n(defn subcategories [e]\n  (js/console.log e)\n  (let [row-map   (js->clj (.-data e) :keywordize-keys true)]\n    (clj->js {:values (get category->subcategories (:category row-map))})))\n\n\n(defn grid [ds]\n  (let [spec {:defaultColDef {:resizable true}\n              :components {:datePicker (js/getDatePicker)}\n              :columnDefs    [{:field \"id\"}\n                              {:field              \"from\"\n                               :editable           editable\n                               :onCellValueChanged onCellValueChanged\n                               :cellEditor         \"datePicker\"\n                               :cellEditorPopup    true}\n                              {:field              \"to\"\n                               :editable           editable\n                               :onCellValueChanged onCellValueChanged\n                               :cellEditor         \"datePicker\"\n                               :cellEditorPopup    true}\n                              {:field              \"category\"\n                               :editable           editable\n                               :onCellValueChanged onCellValueChanged\n                               :cellEditor         \"agPopupSelectCellEditor\" ;\"agRichSelectCellEditor\" but need enterprise edition \n                               :cellEditorPopup    true\n                               :cellEditorParams   {:values (keys category->subcategories)}}\n                              {:field              \"subcategory\"\n                               :editable           editable\n                               :onCellValueChanged onCellValueChanged\n                               :cellEditor         \"agPopupSelectCellEditor\" ;\"agRichSelectCellEditor\" but need enterprise edition \n                               :cellEditorPopup    true\n                               :cellEditorParams   subcategories}\n                              {:field              \"itemCount\"\n                               :type               \"rightAligned\"\n                               :editable           true\n                               :onCellValueChanged onCellValueChanged}\n                              {:field              \"status\"}]\n              :immutableData true\n              :animateRows   true\n              :rowData       ds\n              :getRowNodeId  #(get (js->clj %) \"id\")\n              :onGridReady   (fn [e]\n                               (let [grid-api (.-api e)\n                                     col-api  (.-columnApi e)\n                                     ;col-ids  (vec (map #(.-colId %) (.getAllColumns col-api)))\n                                     ]\n                                 (.sizeColumnsToFit grid-api)\n                                 ;(.autoSizeColumns col-api (clj->js col-ids) true) ; no point without data in the grid\n                                 (reset! state/x-grid-api-component-cursor grid-api)))\n              }]\n    [:div.ag-theme-balham {:style {:height \"100%\"\n                                   :width  \"100%\"\n                                   :color  \"purple\"}}\n     [:> ag-grid/AgGridReact\n      {:gridOptions spec}]]))\n\n\n\n(defn load-from-server []\n  [:button.button \n   {:on-click (fn [_e]\n                (let [url (str \"http://\" js/window.location.hostname \":2021/pasi/graphql\")\n                      model (:aceReusedFurniture model/queries)\n                      graphql (:graphql model)\n                      results-parser    (:results-parser model)\n                      field-order       (:field-order model)\n                      response-handler (fn [response] \n                                         (let [status (:status response)]\n                                           (when (not= 200 status)\n                                             (throw (ex-info (str \"Error code: \" status) {})))\n                                           (let [coll (-> response\n                                                          :body\n                                                          ;; assume that it was an application/json response \n                                                          ;; which will have prompted cljs-http to have \n                                                          ;; converted the JSON data in the body, to Clojure data\n                                                          :data\n                                                          ;; assume a map with a single entry: get the value of that entry\n                                                          vals\n                                                          first\n                                                          ;; parse each possibly nested map to surface the wanted data in the top map\n                                                          results-parser\n                                                          (->> \n                                                           ;; add a status column\n                                                           (map #(assoc % :status \"loaded from server\"))\n                                                           (sort-by :to)\n                                                           reverse))]\n                                             (reset! state/x-ds-cursor coll))))]\n                  (query/http-call url graphql response-handler)))} \n   \"Load from server\"])\n\n(defn new-row []\n  [:button.button\n   {:on-click (fn [_e]\n                (swap! state/x-ds-cursor add-new {:placeholder :not-used}))}\n   \"New row\"])\n\n(defn save-to-server []\n  [:button.button\n   {:on-click (fn [_e]\n                (let [;;TODO flag up and don't server-to-server, any would-be duplicates\n                      changed-rows (remove #(contains? #{\"loaded from server\" \"saved to server\"} (:status %)) @state/x-ds-cursor)]\n                  (js/console.log (count changed-rows) \"changed rows\")\n                  (doseq [m changed-rows]\n                    (js/console.log \"processing changed row\" (str m))\n                  (let [url              \"http://localhost:2021/pasi/graphql\"\n                      graphql          (str \"mutation {\n             upsertAceReusedFurniture(\n               category: \\\"\" (:category m) \"\\\",\n               subcategory: \\\"\" (:subcategory m) \"\\\",\n               from: \\\"\" (:from m) \"\\\",\n               to: \\\"\" (:to m) \"\\\",\n               itemCount: \" (:itemCount m) \"\n             ) { id }\n           }\")\n                      response-handler (fn [response] \n                                         (let [status (:status response)]\n                                           (when (not= 200 status)\n                                             (throw (ex-info (str \"Error code: \" status) {})))\n                                           (let [id (-> response\n                                                        :body\n                                                          ;; assume that it was an application/json response \n                                                          ;; which will have prompted cljs-http to have \n                                                          ;; converted the JSON data in the body, to Clojure data\n                                                        :data\n                                                        (#(do (js/console.log \":data\" (str %)) %))\n                                                        ;; assume a map with a single entry: get the value of that entry\n                                                        vals\nfirst\n                                                        :id)]\n                                             (swap! state/x-ds-cursor update-id (:id m) id))))]\n                  (mutation/http-call url graphql response-handler)))))}\n   \"Save to server\"])\n\n(defn root []\n  (r/after-render (util/scroll-fn))\n  [:div\n   \n   [:div.container.is-fullhd.mt-2\n    [load-from-server]\n    [new-row]\n    [save-to-server]]\n   \n   [:div.container.is-fullhd.mt-2.mb-6\n    [:div {:style {:height 250}}\n     [grid @state/x-ds-cursor]]]\n   \n   [:div.container.is-fullhd\n    [:div.columns\n     [:div.column.is-4\n      (let [raw    @state/x-ds-cursor\n            counts raw]\n        [oz/vega-lite (counts-per-month-spec counts) util/vega-embed-opts])]\n     [:div.column.is-4\n      [:figcaption [:span \"Trends\"]]\n      [:figure.image.is-5by3\n       [:img {:src \"img/ace-trend.png\"\n              :alt \"graph for the grid data - TODO\"}]]]]]\n   \n\n\n   ])\n\n\n\n\n"]}