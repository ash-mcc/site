{"version":3,"sources":["dcs/pasi/app/view/datagrid.cljs"],"mappings":"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","names":["dcs.pasi.app.view.datagrid/lookup-grid-api-component-cursor","pred__52011","expr__52012","cljs.core/deref","js/Error","cljs.core/=","dcs.pasi.app.state/participant-cursor","dcs.pasi.app.state/ace-grid-api-component-cursor","dcs.pasi.app.state/anon-grid-api-component-cursor","dcs.pasi.app.state/dcs-grid-api-component-cursor","dcs.pasi.app.state/frshr-grid-api-component-cursor","dcs.pasi.app.state/stcmf-grid-api-component-cursor","dcs.pasi.app.state/zws-grid-api-component-cursor","dcs.pasi.app.view.datagrid/lookup-type-kw-cursor","pred__52022","expr__52023","dcs.pasi.app.state/ace-type-kw-cursor","dcs.pasi.app.state/anon-type-kw-cursor","dcs.pasi.app.state/dcs-type-kw-cursor","dcs.pasi.app.state/frshr-type-kw-cursor","dcs.pasi.app.state/stcmf-type-kw-cursor","dcs.pasi.app.state/zws-type-kw-cursor","dcs.pasi.app.view.datagrid/types","%","dcs.pasi.app.view.datagrid/filter-types","types_","participant","cljs.spec.alpha.valid_QMARK_","cljs.core/map?","cljs.core/keyword?","participant-name","cljs.core/name","cljs.core._EQ_","cljs.core.filter","p__52028","vec__52029","cljs.core.nth","k","_v","clojure.string/starts-with?","cljs.core.into","dcs.pasi.app.view.datagrid/labels","dcs.pasi.app.view.datagrid/url","js/window.location.hostname","dcs.pasi.app.view.datagrid/get-rows","params","type-kw","dcs.pasi.app.query/query","dcs.pasi.app.view.datagrid/on-click-handler-template","dropdown-id","event","dcs.pasi.app.view.dropdown/toggle-is-activate","s","js/console.log","cljs.core/reset!","cljs.core.keyword","dcs.pasi.app.view.datagrid/type-chooser","prompt","values","ks","cljs.core/keys","cljs.core.map","on-click-handler","cljs.core.partial","dcs.pasi.app.view.dropdown/dropdown","dcs.pasi.app.view.datagrid/grid","p1__52046#","grid-options","js/module$node_modules$ag_grid_react$main.AgGridReact","dcs.pasi.app.view.datagrid/root","height"],"sourcesContent":["(ns dcs.pasi.app.view.datagrid\n  (:require\n   [clojure.string :as str]\n   [cljs.spec.alpha :as s]\n   [reagent.core :as r]\n   [\"ag-grid-react\" :as ag-grid]\n   [dcs.pasi.app.state :as state]\n   [dcs.pasi.app.query :as query]\n   [dcs.pasi.app.view.dropdown :as dropdown]))\n\n(defn lookup-grid-api-component-cursor []\n  (condp = @state/participant-cursor\n    :ace state/ace-grid-api-component-cursor\n    :anon state/anon-grid-api-component-cursor\n    :dcs state/dcs-grid-api-component-cursor\n    :frshr state/frshr-grid-api-component-cursor\n    :stcmf state/stcmf-grid-api-component-cursor\n    :zws state/zws-grid-api-component-cursor))\n\n(defn lookup-type-kw-cursor []\n  (condp = @state/participant-cursor\n    :ace state/ace-type-kw-cursor\n    :anon state/anon-type-kw-cursor\n    :dcs state/dcs-type-kw-cursor\n    :frshr state/frshr-type-kw-cursor\n    :stcmf state/stcmf-type-kw-cursor\n    :zws state/zws-type-kw-cursor))\n\n\n;; Can't (in general) rely on resolving a string to a function in running cljs code \n;; so our wiring has to be hard, and at an appropriate time\n(def types \n  {:zwsCarbonMetric         {:editable-fields #{:carbonWeighting}}\n   :aceFurnitureDescription {:editable-fields #{:itemKg}}\n   :aceReusedFurniture      {:editable-fields #{:itemCount}}\n   :stcmfSource             {:editable-fields #{}}\n   :stcmfDestination        {:editable-fields #{}}\n   :stcmfIncomingFood       {:editable-fields #{:batchKg}}\n   :stcmfRedistributedFood  {:editable-fields #{:batchKg}}\n   :frshrMaterialCategory   {:editable-fields #{}}\n   :frshrReusedMaterial     {:editable-fields #{:batchKg}}\n   :dcsAceToRefData         {:editable-fields #{:fraction}}\n   :dcsStcmfToRefData       {:editable-fields #{:fraction}}\n   :dcsFrshrToRefData       {:editable-fields #{:fraction}}\n   :dcsStcilToRefData       {:editable-fields #{:fraction}}\n   :dcsOrg                  {:editable-fields #{:name :qid}}\n   :dcsProcess              {:editable-fields #{}}\n   :dcsWasteReduction       {:editable-fields #{}}})\n\n(defn filter-types [types_ participant]\n   {:pre [(s/valid? map? types)\n          (s/valid? keyword? participant)]\n    :post [(s/valid? map? %)]}\n  (let [participant-name (name participant)]\n    (if (= :anon participant)\n      {:zwsCarbonMetric         {:editable-fields #{}}\n       :dcsWasteReduction       {:editable-fields #{}}}\n      (->> types_\n         (filter (fn [[k _v]] (str/starts-with? (name k) participant-name)))\n         (into {})))))\n\n\n(def labels\n  {:zwsCarbonMetric         \"The carbon metric\"\n   :aceFurnitureDescription \"Furniture categories\"\n   :aceReusedFurniture      \"Batches of resold/reused furniture\"\n   :stcmfSource             \"Food sources\"\n   :stcmfDestination        \"Food destinations\"\n   :stcmfIncomingFood       \"Batches of incoming food\"\n   :stcmfRedistributedFood  \"Batches of redistributed food\"\n   :frshrMaterialCategory   \"Item categories\"\n   :frshrReusedMaterial     \"Batches of resold/reused items\"\n   :dcsAceToRefData         \"Alloa Community Enterprise metrics -> reference metrics\"\n   :dcsStcmfToRefData       \"Stirling Community Food metrics -> reference metrics\"\n   :dcsFrshrToRefData       \"The Fair Share metrics -> reference metrics\"\n   :dcsStcilToRefData       \"Stirling council metrics -> reference metrics\"\n   :dcsOrg                  \"Organisations\"\n   :dcsProcess              \"Processes which reduce waste\"\n   :dcsWasteReduction       \"Calculated instances of waste reduction\"})\n\n\n(def url (str \"http://\" js/window.location.hostname \":2021/pasi/graphql\"))\n\n\n(defn get-rows [params]\n  (let [type-kw @(lookup-type-kw-cursor)]\n    (query/query @(lookup-grid-api-component-cursor) \n                 params \n                 type-kw \n                 (:editable-fields (type-kw types)) \n                 url)))\n\n\n(defn on-click-handler-template\n  \"controls the grid's datasource\"\n  [dropdown-id event]\n  (.preventDefault event)\n  (dropdown/toggle-is-activate dropdown-id)\n  (let [s (-> event .-target .-id)]\n    ;(js/console.log event)\n    (js/console.log \"s:\" s)\n    (reset! (lookup-type-kw-cursor) (keyword s))\n    ;; The get-rows defn hasn't changed \n    ;; - reassinging it only to prompt a re-fetch (which will use the new type-kw).\n    ;; Probably there is a nicer way to force the re-fetch.\n    (.setDatasource @(lookup-grid-api-component-cursor) #js{:getRows get-rows})))\n\n(defn type-chooser []\n  (let [participant      @state/participant-cursor\n        dropdown-id      (str \"chooser-for-\" (name participant))\n        type-kw          @(lookup-type-kw-cursor)\n        prompt           (type-kw labels)\n        values           (let [ks (keys (filter-types types participant))]\n                           (map (fn [k] [(name k) (k labels)]) ks))\n        on-click-handler (partial on-click-handler-template dropdown-id)]\n    [dropdown/dropdown dropdown-id prompt values on-click-handler]))\n\n(defn grid []\n  (let [participant @state/participant-cursor\n        grid-options {:rowModelType \"infinite\" ;; define with otherwise :datasource with :getRows won't work\n                      :datasource   {:getRows get-rows}\n                      :onGridReady  #(reset! (lookup-grid-api-component-cursor) (.-api %))}]\n    [:div.ag-theme-balham {:style {:height \"100%\"\n                                   :width  \"100%\"\n                                   :color  \"purple\"}}\n     [:> ag-grid/AgGridReact\n      {:gridOptions grid-options}]]))\n\n\n(defn root [participant height]\n  (js/console.log \"datagrid root participant:\" participant)\n  [:div {:style {:height height}}\n   [type-chooser]\n   [grid]\n   ])\n\n\n\n\n  "]}